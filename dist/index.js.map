{"version":3,"file":"index.js","sources":["../src/libs/is.ts","../src/libs/isObject.ts","../src/libs/isUndefined.ts","../src/libs/labelReplace.ts","../src/libs/toArray.ts","../src/libs/isFunction.ts","../src/libs/isArray.ts","../src/libs/each.ts","../src/libs/isString.ts","../src/libs/toUnderlineName.ts","../src/libs/fix0.ts","../src/libs/isNumber.ts","../src/libs/isNull.ts","../src/libs/toDate.ts","../src/libs/date.ts","../src/libs/getNumberWithDec.ts","../src/libs/getNumberAverage.ts","../src/libs/getNumberVariance.ts","../src/libs/copy.ts","../src/libs/extend.ts","../src/libs/getStdDeviation.ts","../src/libs/isBoolean.ts","../src/libs/isError.ts","../src/libs/isRegexp.ts","../src/libs/isValidArray.ts","../src/libs/merge.ts","../src/libs/numberFormat.ts","../src/libs/queryString.ts","../src/libs/random.ts","../src/libs/serialize.ts","../src/libs/shuffle.ts"],"sourcesContent":["/**\n * 数据类型判断\n * @param  subject 待判断的数据\n * @param  type    数据类型名字\n * @return         判断结果\n */\nexport default function is(subject: any, type: string): boolean {\n    return Object.prototype.toString.call(subject).substr(8, type.length).toLowerCase() === type\n}","import is from \"./is\";\n\n/**\n * 是否是数组\n * @param  subject 待判断的数据\n */\nexport function isObject(subject: any) {\n    return is(subject, \"object\");\n}\n","import is from \"./is\";\n\n/**\n * 是否 undefined\n * @param  subject 待判断的数据\n */\nexport function isUndefined(subject: any) {\n    return is(subject, \"undefined\");\n}","import { isObject } from \"./isObject\";\nimport { isUndefined } from \"./isUndefined\";\n\n/**\n * 带花括号标签检测正则\n * @type {RegExp}\n */\nconst labelReplaceExp: RegExp = /\\{(\\w+)\\}/g\nexport { labelReplaceExp }\n\n/**\n * 批量替换字符串中带花括号标签为指定数据\n * @param  tpl  待处理的字符串\n * @param  data 替换数据\n * @param  keep 是否保留未能解析的标签\n * @return      替换后端字符串\n * @example\n * ```tsx\n * labelReplace('{a}/{b}/c', {a: 1, b: 2}) // 1/2/c\n * labelReplace('{a}/{b}/c', {a: 1}, true) // 1/{b}/c\n * ```\n */\nexport function labelReplace<T>(tpl: string, data: T, keep: boolean = false): string {\n    return tpl.replace(labelReplaceExp, function (_, key) {\n        const re = isObject(data) ? data[key] : data;\n        if (isUndefined(re) && keep) {\n            return _;\n        }\n        return re;\n    })\n}","/**\n * 伪数组转成数组\n * @param   args 伪数组对象\n * @return       转化后的数组\n */\nexport function toArray<T>(args: any): Array<T> {\n    return Array.prototype.slice.call(args);\n}","import is from \"./is\";\n\n/**\n * 是否是函数\n * @param  subject 待判断的数据\n */\nexport function isFunction(subject: any) {\n    return is(subject, \"function\");\n}","/**\n * 是否是数组\n * @param  subject 待判断的数据\n */\nexport function isArray(subject: any) {\n    return Array.isArray(subject);\n}\n","import { isFunction } from \"./isFunction\";\nimport { isObject } from \"./isObject\";\nimport { isArray } from \"./isArray\";\n\n/**\n * 通用遍历函数\n * @param  data    待遍历数据\n * @param  handler 处理函数\n * @param  context 作用域\n */\nexport function each(data: any[] | object, handler: Function, context?: object): void {\n    context = context || this;\n    var hasHandler = isFunction(handler);\n    if (isArray(data)) {\n        for (let i = 0; i < (data as any[]).length; i++) {\n            let re = true;\n            if (hasHandler) {\n                re = handler.call(context, data[i], i);\n            }\n            if (re === false) {\n                break;\n            }\n        }\n    } else if (isObject(data)) {\n        const keys = Object.keys(data);\n        for (let i = 0; i < keys.length; i++) {\n            let re = true;\n            if (hasHandler) {\n                re = handler.call(context, data[keys[i]], keys[i]);\n            }\n            if (re === false) {\n                break;\n            }\n        }\n    }\n}","import is from \"./is\";\n/**\n * 是否是字符串\n * @param  subject 待判断的数据\n */\nexport function isString(subject: any) {\n    return is(subject, \"string\");\n}","import { isString } from \"./isString\";\n\n/**\n * 大写字母匹配正则\n */\nconst UPPER_CASE_REGEXP: RegExp = /[A-Z]/g;\n\nexport { UPPER_CASE_REGEXP }\n\n/**\n * 转化为蛇形命名\n * @param  str 待处理的字符串\n * @return     处理后的字符串\n */\nexport function toUnderlineName(str: string): string {\n    if (isString(str)) {\n        return str.replace(UPPER_CASE_REGEXP, (m, i) => `${i ? '_' : ''}${m.toLowerCase()}`);\n    }\n    return str;\n}","/**\n * 格式化数字, 自动补0前续\n * @param  number 要格式化的数字\n * @param  size   格式化后出来的数字位数\n * @return        格式化结果\n */\nexport function fix0(number, size: number): string {\n    number = number.toString();\n    while ((number).length < size) {\n        number = '0' + number;\n    }\n    return number;\n}","import is from \"./is\";\n\n/**\n * 是否是数字\n * @param  subject 待判断的数据\n */\nexport function isNumber(subject: any) {\n    return !isNaN(subject) && is(subject, \"number\");\n}","import is from \"./is\";\n\n/**\n * 是否是 null\n * @param  subject 待判断的数据\n */\nexport function isNull(subject: any) {\n    return is(subject, \"null\")\n}","import { isNumber } from \"./isNumber\";\nimport { isString } from \"./isString\";\n\n/**\n * 时间分割正则\n */\nconst DATE_REGEXP = /[^\\d]+/;\nexport { DATE_REGEXP };\n\n/**\n * 转换对象为JS Date对象\n * @param   date   <可选> 日期数据(时间戳, 字符串, Date对象, 空)\n * @param   offset 修正偏移的秒数\n * @return         返回JS Date对象 / NULL 日期格式错误\n */\nexport function toDate(date, offset?: number) {\n    let ts;\n    if (date instanceof Date) {\n        ts = date;\n    } else if (isNumber(date)) {\n        ts = new Date(date);\n    } else if (isNaN(+date)) {\n        if (isString(date)) {\n            date = date.split(DATE_REGEXP);\n            if (date.length === 3) {\n                ts = new Date(+date[0], date[1] - 1, +date[2], 0, 0, 0, 0);\n                if (isNaN(+ts)) {\n                    ts = null;\n                }\n            }\n        } else {\n            return null;\n        }\n    }\n    if (!ts) {\n        if (!date) {\n            return null;\n        }\n        ts = new Date();\n        if (date > 5e8) {\n            // 时间戳\n            ts.setTime(date * 1000);\n        } else {\n            // 时间偏移(秒数)\n            ts.setTime(ts.getTime() + date * 1000);\n        }\n    }\n    if (!isNaN(Number(offset))) {\n        ts.setTime(ts.getTime() + (offset as number) * 1000);\n    }\n    return ts;\n}","import { toDate } from \"./toDate\";\nimport { fix0 } from \"./fix0\";\n\n/**\n * 日期格式化格式匹配正则\n */\nconst FORMAT_REGEXP = /[YymndjNwaAghGHisT]/g;\nexport { FORMAT_REGEXP };\n\n/**\n * 按照指定格式将日期对象或时间戳转化为日期字符串\n * @param  date   日期对象或时间戳\n * @param  format 日期格式\n * @param  offset 修正偏移的秒数\n * @return        日期\n */\nexport function date(date, format?: string, offset?: number): string {\n    format = format || \"Y-m-d H:i:s\";\n    let timestamp = toDate(date, offset);\n    if (timestamp === null) {\n        timestamp = new Date();\n    }\n    return format.replace(FORMAT_REGEXP, function formatCallback(tag: string) {\n        switch (tag) {\n            case \"Y\": return timestamp.getFullYear();\n            case \"y\": return timestamp.getFullYear() % 100;\n            case \"m\": return fix0(timestamp.getMonth() + 1, 2);\n            case \"n\": return timestamp.getMonth() + 1;\n            case \"d\": return fix0(timestamp.getDate(), 2);\n            case \"j\": return timestamp.getDate();\n            case \"N\": return timestamp.getDay();\n            case \"w\": return timestamp.getDay() % 7;\n            case \"a\": return timestamp.getHours() < 12 ? \"am\" : \"pm\";\n            case \"A\": return timestamp.getHours() < 12 ? \"AM\" : \"PM\";\n            case \"g\": return timestamp.getHours() % 12 + 1;\n            case \"h\": return fix0(timestamp.getHours() % 12 + 1, 2);\n            case \"G\": return timestamp.getHours();\n            case \"H\": return fix0(timestamp.getHours(), 2);\n            case \"i\": return fix0(timestamp.getMinutes(), 2);\n            case \"s\": return fix0(timestamp.getSeconds(), 2);\n            case \"T\": return Math.round(timestamp.getTime() / 1000);\n        }\n        return tag;\n    });\n}","/**\n * 浮点数字精度处理\n * @param  num   待处理数字\n * @param  dec   精度\n * @return       处理后的数字\n */\nexport function getNumberWithDec(num: number, dec: number) {\n    var pow10s = Math.pow(10, dec || 0);\n    return (dec) ? Math.round(pow10s * num) / pow10s : num;\n}\n","import { getNumberWithDec} from \"./getNumberWithDec\";\n/**\n * 获取一组数组中的平均数\n * @param  arr 待处理数组\n * @param  dec 保留精度\n * @return     平均数\n */\nexport function getNumberAverage(arr: number[], dec: number) {\n    var i = arr.length,\n        sum = 0;\n    while (i--) {\n        sum += arr[i];\n    }\n    return getNumberWithDec((sum / arr.length), dec);\n}","import { getNumberWithDec } from \"./getNumberWithDec\";\nimport { getNumberAverage } from \"./getNumberAverage\";\n\n/**\n * 获取一组数组中的方差\n * @param  arr 待处理数组\n * @param  dec 保留精度\n * @return     方差\n */\nexport function getNumberVariance(arr: number[], dec: number) {\n    var avg = getNumberAverage(arr, dec),\n        i = arr.length,\n        v = 0;\n\n    while (i--) {\n        v += Math.pow((arr[i] - avg), 2);\n    }\n    v /= (arr.length - 1);\n    return getNumberWithDec(v, dec);\n}\n","/**\n * 简单复制\n * @param  item 原始数据\n * @return      复制后的数据\n */\nexport function copy<T>(item: T): T {\n    return JSON.parse(JSON.stringify(item));\n}","import { toArray } from \"./toArray\";\nimport { each } from \"./each\";\n\n/**\n * 对象扩展方法\n * @return 合并后的对象\n */\nexport function extend() {\n    var args: any[] = toArray(arguments);\n    var dat = args.shift();\n    if (dat) {\n        if (args.length) {\n            while (args.length) {\n                const item = args.shift();\n                if (item) {\n                    each(item, function (val, key) {\n                        dat[key] = val;\n                    })\n                }\n            }\n        }\n        return dat;\n    }\n\n    return null;\n}","import { getNumberWithDec } from \"./getNumberWithDec\";\nimport { getNumberVariance } from \"./getNumberVariance\";\n\n/**\n * 获取一组数组中的标准差\n * @param  arr  待处理数组\n * @param  dec  保留精度\n * @return      标准差\n */\nexport function getStdDeviation(arr: number[], dec: number) {\n    var stdDev = Math.sqrt(getNumberVariance(arr, dec));\n    return getNumberWithDec(stdDev, dec);\n};","import is from \"./is\";\n\n/**\n * 是否是布尔值\n * @param  subject 待判断的数据\n */\nexport function isBoolean(subject: any) {\n    return is(subject, \"boolean\");\n}","import is from \"./is\";\n\n/**\n * 是否是错误对象\n * @param subject 待判断数据\n */\nexport function isError(subject: any) {\n    return is(subject, \"error\");\n}","import is from \"./is\";\n\n/**\n * 是否是正则\n * @param subject 待判断数据\n */\nexport function isRegexp(subject: any) {\n    return is(subject, \"regexp\");\n}","/**\n * 是否是数组且长度大于0\n * @param  subject 待判断的数据\n */\nexport function isValidArray(subject: any): boolean {\n    return Array.isArray(subject) && subject.length > 0;\n}","import { isObject } from \"./isObject\";\n\n/**\n * 合并\n * @param target  合并基准对象\n * @param sources 后续合并对象\n */\nexport function merge(target: object, ...sources: any[]) {\n    if (!sources.length) return target;\n    const source: any = sources.shift();\n    if (isObject(target) && isObject(source)) {\n        for (const key in source) {\n            if (isObject(source[key])) {\n                if (!target[key]) {\n                    Object.assign(target, { [key]: {} });\n                }\n                merge(target[key], source[key]);\n            } else {\n                Object.assign(\n                    target,\n                    {\n                        [key]: source[key]\n                    }\n                );\n            }\n        }\n    }\n    return merge(target, ...sources);\n}","import { isUndefined } from \"./isUndefined\";\nimport { isNumber } from \"./isNumber\";\nimport { isNull } from \"./isNull\";\n\n/**\n * 按位数格式化数字\n * @param  val       要格式化的数字\n * @param  separator 分割符\n * @param  size      分割位数间隔\n * @return           格式化完的字符串\n */\nexport function numberFormat(val: any, separator: string, size: number) {\n    if (!isNumber(val)) {\n        return \"0\";\n    }\n    if (isUndefined(separator) || isNull(separator)) {\n        separator = \",\";\n    }\n    if (!isNumber(size)) {\n        size = 3;\n    }\n    var last = size;\n\n    val = val.toString();\n    var pos = val.indexOf(\".\");\n    var res = \"\";\n    if (pos === -1) {\n        pos = val.length;\n    } else {\n        res = val.substr(pos);\n    }\n\n    if (val.charAt(0) === \"-\") {\n        last++;\n    }\n    while (pos > last) {\n        pos -= size;\n        res = separator + val.substr(pos, size) + res;\n    }\n    if (pos) {\n        res = val.substr(0, pos) + res;\n    }\n    return res;\n}","/**\n * 请求参数对象转成请求参数字符串\n * @param dat 请求参数\n */\nexport function queryString(dat: { [key: string]: any }): string {\n    let queryStr: string\n    if (dat) {\n        queryStr = Object.keys(dat)\n            .map(key => {\n                return `${key}=${encodeURIComponent(dat[key])}`\n            })\n            .join('&');\n    } else {\n        queryStr = '';\n    }\n    return queryStr;\n}","/**\n * 获取包含指定范围内的随机数\n * @param  max 最大范围(包含)\n * @param  min 最小范围(包含，默认 0)\n * @return     随机数\n */\nexport function random(max: number, min: number): number {\n    if (min === undefined) {\n        min = 0;\n    }\n    return Math.round(Math.random() * (max - min) + min);\n}","/**\n * 序列化请求参数\n * @param  query 参数对象\n * @return       参数字符串\n */\nexport function serialize(query: object, encode: boolean = false): string {\n    return Object.keys(query)\n        .map(key => `${key}=${encode ? encodeURIComponent(query[key]) : query[key]}`)\n        .join('&');\n}","/**\n * 数组随机分布\n * @param  arr  原始数组\n * @return      打乱后的数组\n */\nexport function shuffle<T>(arr: T[]): T[] {\n    for (let i = arr.length - 1; i >= 0; i--) {\n        const rIndex = Math.floor(Math.random() * (i + 1));\n        const item = arr[rIndex];\n        arr[rIndex] = arr[i];\n        arr[i] = item;\n    }\n    return arr;\n}"],"names":["is","subject","type","Object","prototype","toString","call","substr","length","toLowerCase","isObject","isUndefined","labelReplaceExp","toArray","args","Array","slice","isFunction","isArray","each","data","handler","context","this","hasHandler","let","i","re","const","keys","isString","UPPER_CASE_REGEXP","fix0","number","size","isNumber","isNaN","isNull","DATE_REGEXP","toDate","date","offset","ts","Date","split","setTime","getTime","Number","FORMAT_REGEXP","getNumberWithDec","num","dec","pow10s","Math","pow","round","getNumberAverage","arr","sum","getNumberVariance","avg","v","item","JSON","parse","stringify","format","timestamp","replace","tag","getFullYear","getMonth","getDate","getDay","getHours","getMinutes","getSeconds","arguments","dat","shift","val","key","sqrt","tpl","keep","_","merge","target","sources","source","assign","separator","last","pos","indexOf","res","charAt","map","encodeURIComponent","join","max","min","undefined","random","query","encode","rIndex","floor","str","m"],"mappings":"sBAMwBA,EAAGC,EAAcC,GACrC,OAAOC,OAAOC,UAAUC,SAASC,KAAKL,GAASM,OAAO,EAAGL,EAAKM,QAAQC,gBAAkBP,WCD5EQ,EAAST,GACrB,OAAOD,EAAGC,EAAS,mBCDPU,EAAYV,GACxB,OAAOD,EAAGC,EAAS,wECAjBW,EAA0B,sBCFhBC,EAAWC,GACvB,OAAOC,MAAMX,UAAUY,MAAMV,KAAKQ,YCAtBG,EAAWhB,GACvB,OAAOD,EAAGC,EAAS,qBCHPiB,EAAQjB,GACpB,OAAOc,MAAMG,QAAQjB,GCKzB,SAAgBkB,EAAKC,EAAsBC,EAAmBC,GAC1DA,EAAUA,GAAWC,KACrB,IAAIC,EAAaP,EAAWI,GAC5B,GAAIH,EAAQE,GACR,IAAKK,IAAIC,EAAI,EAAGA,EAAKN,EAAeZ,OAAQkB,IAAK,CAC7CD,IAAIE,GAAK,EAIT,GAHIH,IACAG,EAAKN,EAAQf,KAAKgB,EAASF,EAAKM,GAAIA,KAE7B,IAAPC,EACA,WAGL,GAAIjB,EAASU,GAEhB,IADAQ,IAAMC,EAAO1B,OAAO0B,KAAKT,GAChBM,EAAI,EAAGA,EAAIG,EAAKrB,OAAQkB,IAAK,CAClCD,IAAIE,GAAK,EAIT,GAHIH,IACAG,EAAKN,EAAQf,KAAKgB,EAASF,EAAKS,EAAKH,IAAKG,EAAKH,MAExC,IAAPC,EACA,gBC1BAG,EAAS7B,GACrB,OAAOD,EAAGC,EAAS,UCDvB2B,IAAMG,EAA4B,kBCClBC,EAAKC,EAAQC,GAEzB,IADAD,EAASA,EAAO5B,WACT,EAASG,OAAS0B,GACrBD,EAAS,IAAMA,EAEnB,OAAOA,WCLKE,EAASlC,GACrB,OAAQmC,MAAMnC,IAAYD,EAAGC,EAAS,mBCD1BoC,EAAOpC,GACnB,OAAOD,EAAGC,EAAS,QCDvB2B,IAAMU,EAAc,kBASJC,EAAOC,EAAMC,GACzBhB,IAAIiB,EACJ,GAAIF,aAAgBG,KAChBD,EAAKF,OACF,GAAIL,EAASK,GAChBE,EAAK,IAAIC,KAAKH,QACX,GAAIJ,OAAOI,GAAO,CACrB,IAAIV,EAASU,GAST,OAAO,KAPa,KADpBA,EAAOA,EAAKI,MAAMN,IACT9B,SACLkC,EAAK,IAAIC,MAAMH,EAAK,GAAIA,EAAK,GAAK,GAAIA,EAAK,GAAI,EAAG,EAAG,EAAG,GACpDJ,OAAOM,KACPA,EAAK,OAOrB,IAAKA,EAAI,CACL,IAAKF,EACD,OAAO,KAEXE,EAAK,IAAIC,KACLH,EAAO,IAEPE,EAAGG,QAAe,IAAPL,GAGXE,EAAGG,QAAQH,EAAGI,UAAmB,IAAPN,GAMlC,OAHKJ,MAAMW,OAAON,KACdC,EAAGG,QAAQH,EAAGI,UAAiC,IAApBL,GAExBC,EC5CXd,IAAMoB,EAAgB,gCCANC,EAAiBC,EAAaC,GAC1C,IAAIC,EAASC,KAAKC,IAAI,GAAIH,GAAO,GACjC,OAAO,EAAQE,KAAKE,MAAMH,EAASF,GAAOE,EAASF,WCDvCM,EAAiBC,EAAeN,GAG5C,IAFA,IAAIzB,EAAI+B,EAAIjD,OACRkD,EAAM,EACHhC,KACHgC,GAAOD,EAAI/B,GAEf,OAAOuB,EAAkBS,EAAMD,EAAIjD,OAAS2C,YCJhCQ,EAAkBF,EAAeN,GAK7C,IAJA,IAAIS,EAAMJ,EAAiBC,EAAKN,GAC5BzB,EAAI+B,EAAIjD,OACRqD,EAAI,EAEDnC,KACHmC,GAAKR,KAAKC,IAAKG,EAAI/B,GAAKkC,EAAM,GAGlC,OAAOX,EADPY,GAAMJ,EAAIjD,OAAS,EACQ2C,yBCbPW,GACpB,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,kBJUrC,SAAqBtB,EAAM0B,EAAiBzB,GACxCyB,EAASA,GAAU,cACnBzC,IAAI0C,EAAY5B,EAAOC,EAAMC,GAI7B,OAHkB,OAAd0B,IACAA,EAAY,IAAIxB,MAEbuB,EAAOE,QAAQpB,GAAe,SAAwBqB,GACzD,OAAQA,GACJ,IAAK,IAAK,OAAOF,EAAUG,cAC3B,IAAK,IAAK,OAAOH,EAAUG,cAAgB,IAC3C,IAAK,IAAK,OAAOtC,EAAKmC,EAAUI,WAAa,EAAG,GAChD,IAAK,IAAK,OAAOJ,EAAUI,WAAa,EACxC,IAAK,IAAK,OAAOvC,EAAKmC,EAAUK,UAAW,GAC3C,IAAK,IAAK,OAAOL,EAAUK,UAC3B,IAAK,IAAK,OAAOL,EAAUM,SAC3B,IAAK,IAAK,OAAON,EAAUM,SAAW,EACtC,IAAK,IAAK,OAAON,EAAUO,WAAa,GAAK,KAAO,KACpD,IAAK,IAAK,OAAOP,EAAUO,WAAa,GAAK,KAAO,KACpD,IAAK,IAAK,OAAOP,EAAUO,WAAa,GAAK,EAC7C,IAAK,IAAK,OAAO1C,EAAKmC,EAAUO,WAAa,GAAK,EAAG,GACrD,IAAK,IAAK,OAAOP,EAAUO,WAC3B,IAAK,IAAK,OAAO1C,EAAKmC,EAAUO,WAAY,GAC5C,IAAK,IAAK,OAAO1C,EAAKmC,EAAUQ,aAAc,GAC9C,IAAK,IAAK,OAAO3C,EAAKmC,EAAUS,aAAc,GAC9C,IAAK,IAAK,OAAOvB,KAAKE,MAAMY,EAAUrB,UAAY,KAEtD,OAAOuB,oCKnCf,WACI,IAAIvD,EAAcD,EAAQgE,WACtBC,EAAMhE,EAAKiE,QACf,GAAID,EAAK,CACL,GAAIhE,EAAKN,OACL,KAAOM,EAAKN,QAAQ,CAChBoB,IAAMkC,EAAOhD,EAAKiE,QACdjB,GACA3C,EAAK2C,GAAM,SAAUkB,EAAKC,GACtBH,EAAIG,GAAOD,KAK3B,OAAOF,EAGX,OAAO,wICfqBrB,EAAeN,GAE3C,OAAOF,EADMI,KAAK6B,KAAKvB,EAAkBF,EAAKN,IACdA,8DCLVlD,GACtB,OAAOD,EAAGC,EAAS,qCCDCA,GACpB,OAAOD,EAAGC,EAAS,gHCDEA,GACrB,OAAOD,EAAGC,EAAS,kFCHMA,GACzB,OAAOc,MAAMG,QAAQjB,IAAYA,EAAQO,OAAS,wBrBiBtD,SAAgC2E,EAAa/D,EAASgE,GAClD,uBADkE,GAC3DD,EAAIf,QAAQxD,GAAiB,SAAUyE,EAAGJ,GAC7CrD,IAAMD,EAAKjB,EAASU,GAAQA,EAAK6D,GAAO7D,EACxC,OAAIT,EAAYgB,IAAOyD,EACZC,EAEJ1D,uDsBrBC2D,EAAMC,qEAClB,IAAKC,EAAQhF,OAAQ,OAAO+E,EAC5B3D,IAAM6D,EAAcD,EAAQT,QAC5B,GAAIrE,EAAS6E,IAAW7E,EAAS+E,GAC7B,IAAK7D,IAAMqD,KAAOQ,EACV/E,EAAS+E,EAAOR,KACXM,EAAON,IACR9E,OAAOuF,OAAOH,MAAQ,IAAGN,GAAM,OAEnCK,EAAMC,EAAON,GAAMQ,EAAOR,KAE1B9E,OAAOuF,OACHH,MACA,IACKN,GAAMQ,EAAOR,OAMlC,OAAOK,gBAAMC,UAAWC,0BChB5B,SAA6BR,EAAUW,EAAmBzD,GACtD,IAAKC,EAAS6C,GACV,MAAO,KAEPrE,EAAYgF,IAActD,EAAOsD,MACjCA,EAAY,KAEXxD,EAASD,KACVA,EAAO,GAEX,IAAI0D,EAAO1D,EAGP2D,GADJb,EAAMA,EAAI3E,YACIyF,QAAQ,KAClBC,EAAM,GAUV,KATa,IAATF,EACAA,EAAMb,EAAIxE,OAEVuF,EAAMf,EAAIzE,OAAOsF,GAGC,MAAlBb,EAAIgB,OAAO,IACXJ,IAEGC,EAAMD,GACTC,GAAO3D,EACP6D,EAAMJ,EAAYX,EAAIzE,OAAOsF,EAAK3D,GAAQ6D,EAK9C,OAHIF,IACAE,EAAMf,EAAIzE,OAAO,EAAGsF,GAAOE,GAExBA,gCCtCiBjB,GAWxB,OATIA,EACW3E,OAAO0B,KAAKiD,GAClBmB,cAAIhB,GACD,OAAUA,MAAOiB,mBAAmBpB,EAAIG,OAE3CkB,KAAK,KAEC,4BCPIC,EAAaC,GAIhC,YAHYC,IAARD,IACAA,EAAM,GAEHhD,KAAKE,MAAMF,KAAKkD,UAAYH,EAAMC,GAAOA,+BCL1BG,EAAeC,GACrC,uBADuD,GAChDtG,OAAO0B,KAAK2E,GACdP,cAAIhB,UAAUA,OAAOwB,EAASP,mBAAmBM,EAAMvB,IAAQuB,EAAMvB,OACrEkB,KAAK,+BCHa1C,GACvB,IAAKhC,IAAIC,EAAI+B,EAAIjD,OAAS,EAAGkB,GAAK,EAAGA,IAAK,CACtCE,IAAM8E,EAASrD,KAAKsD,MAAMtD,KAAKkD,UAAY7E,EAAI,IACzCoC,EAAOL,EAAIiD,GACjBjD,EAAIiD,GAAUjD,EAAI/B,GAClB+B,EAAI/B,GAAKoC,EAEb,OAAOL,uErBEqBmD,GAC5B,OAAI9E,EAAS8E,GACFA,EAAIxC,QAAQrC,YAAoB8E,EAAGnF,UAASA,EAAI,IAAM,IAAKmF,EAAEpG,iBAEjEmG"}